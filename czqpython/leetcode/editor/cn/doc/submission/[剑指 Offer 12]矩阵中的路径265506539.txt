class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        """
        1. 找到起始位置，dfs
        2. dfs get_children, 
        3. is_clear: 判断是否已经来过
        """
        m = len(board)
        n = len(board[0])
        matrix = [[0] * n for _ in range(m)]
        def get_child(cell):
            i, j = cell
            return ((i + a, j + b)
                for a in range(-1, 2)
                for b in range(-1, 2)
                if a == 0 or b == 0
                if not (a == 0 and b == 0)
                if 0 <= i + a < m
                if 0 <= j + b < n
                if is_clear((i + a, j + b))
                )

        def is_clear(cell):
            i, j = cell
            return matrix[i][j] == 0

        def get_val(cell):
            i, j = cell
            return board[i][j]

        def dfs(cell, index):
            # 首先判断该index处的值是否相等
            i, j = cell
            if word[index] != board[i][j]:
                return False
            # 然后看index是否到达len(word) - 1
            if index >= len(word) - 1:
                return True
            matrix[i][j] = 1
            for child in get_child(cell):
                if word[index + 1] != get_val(child): continue
                if dfs(child, index + 1):
                    return True
            matrix[i][j] = 0
            return False

        for i in range(m):
            for j in range(n):
                if board[i][j] == word[0]:
                    if dfs((i,j), 0):
                        return True
        return False


        
            
# runtime:364 ms
# memory:18.5 MB
